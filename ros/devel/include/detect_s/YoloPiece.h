// Generated by gencpp from file detect_s/YoloPiece.msg
// DO NOT EDIT!


#ifndef DETECT_S_MESSAGE_YOLOPIECE_H
#define DETECT_S_MESSAGE_YOLOPIECE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detect_s
{
template <class ContainerAllocator>
struct YoloPiece_
{
  typedef YoloPiece_<ContainerAllocator> Type;

  YoloPiece_()
    : x(0)
    , y(0)
    , w(0)
    , h(0)
    , prob(0.0)
    , obj_id(0.0)
    , track_id(0.0)
    , frames_counter(0.0)  {
    }
  YoloPiece_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , w(0)
    , h(0)
    , prob(0.0)
    , obj_id(0.0)
    , track_id(0.0)
    , frames_counter(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _x_type;
  _x_type x;

   typedef uint32_t _y_type;
  _y_type y;

   typedef uint32_t _w_type;
  _w_type w;

   typedef uint32_t _h_type;
  _h_type h;

   typedef float _prob_type;
  _prob_type prob;

   typedef float _obj_id_type;
  _obj_id_type obj_id;

   typedef float _track_id_type;
  _track_id_type track_id;

   typedef float _frames_counter_type;
  _frames_counter_type frames_counter;





  typedef boost::shared_ptr< ::detect_s::YoloPiece_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detect_s::YoloPiece_<ContainerAllocator> const> ConstPtr;

}; // struct YoloPiece_

typedef ::detect_s::YoloPiece_<std::allocator<void> > YoloPiece;

typedef boost::shared_ptr< ::detect_s::YoloPiece > YoloPiecePtr;
typedef boost::shared_ptr< ::detect_s::YoloPiece const> YoloPieceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detect_s::YoloPiece_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detect_s::YoloPiece_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace detect_s

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'detect_s': ['/ros_test/AD_Middle_Test/ros/src/detect_s/msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::detect_s::YoloPiece_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detect_s::YoloPiece_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_s::YoloPiece_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detect_s::YoloPiece_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_s::YoloPiece_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detect_s::YoloPiece_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detect_s::YoloPiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "402da640748cfc0204aa81cf174b42d0";
  }

  static const char* value(const ::detect_s::YoloPiece_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x402da640748cfc02ULL;
  static const uint64_t static_value2 = 0x04aa81cf174b42d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::detect_s::YoloPiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detect_s/YoloPiece";
  }

  static const char* value(const ::detect_s::YoloPiece_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detect_s::YoloPiece_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 x\n"
"uint32 y\n"
"uint32 w\n"
"uint32 h\n"
"float32 prob\n"
"float32 obj_id\n"
"float32 track_id\n"
"float32 frames_counter\n"
;
  }

  static const char* value(const ::detect_s::YoloPiece_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detect_s::YoloPiece_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.h);
      stream.next(m.prob);
      stream.next(m.obj_id);
      stream.next(m.track_id);
      stream.next(m.frames_counter);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YoloPiece_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detect_s::YoloPiece_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detect_s::YoloPiece_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.h);
    s << indent << "prob: ";
    Printer<float>::stream(s, indent + "  ", v.prob);
    s << indent << "obj_id: ";
    Printer<float>::stream(s, indent + "  ", v.obj_id);
    s << indent << "track_id: ";
    Printer<float>::stream(s, indent + "  ", v.track_id);
    s << indent << "frames_counter: ";
    Printer<float>::stream(s, indent + "  ", v.frames_counter);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECT_S_MESSAGE_YOLOPIECE_H
